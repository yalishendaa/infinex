const fs = require('fs').promises;

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞ api-data.json
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node import-api-data.js
 */

async function importApiData() {
  console.log('üìã –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞');
  console.log('=====================================');
  
  try {
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    const data = await fs.readFile('api-data.json', 'utf8');
    
    // –ü–∞—Ä—Å–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ JSON –º–∞—Å—Å–∏–≤–æ–≤ –ø–æ–¥—Ä—è–¥
    const apiResponses = [];
    const lines = data.trim().split('\n');

    for (const line of lines) {
      if (line.trim()) {
        try {
          const parsed = JSON.parse(line.trim());
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
          if (Array.isArray(parsed) && parsed.length > 0 && 
              parsed[0].result && parsed[0].result.data && parsed[0].result.data.leaderboard) {
            apiResponses.push(parsed);
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –æ—Ç–≤–µ—Ç API: ${parsed[0].result.data.leaderboard.length} –∏–≥—Ä–æ–∫–æ–≤`);
          } else {
            console.log(`‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: ${line.substring(0, 50)}...`);
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`);
          console.log(`   –°—Ç—Ä–æ–∫–∞: ${line.substring(0, 100)}...`);
        }
      }
    }
    
    console.log(`üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ api-data.json: ${apiResponses.length} –æ—Ç–≤–µ—Ç–æ–≤ API`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const allPlayers = [];
    
    apiResponses.forEach((apiResponse, responseIndex) => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ (–∫–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥ –≤ –æ—Ç–≤–µ—Ç–µ)
      if (Array.isArray(apiResponse)) {
        apiResponse.forEach((roundData, roundIndex) => {
          if (roundData.result && roundData.result.data && roundData.result.data.leaderboard) {
            const leaderboard = roundData.result.data.leaderboard;
            console.log(`üìä –û—Ç–≤–µ—Ç ${responseIndex + 1}, —Ä–∞—É–Ω–¥ ${roundIndex + 1}: ${leaderboard.length} –∏–≥—Ä–æ–∫–æ–≤`);
            
            leaderboard.forEach(player => {
              // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "Seal"
              if (player.username.toLowerCase() === 'seal') {
                console.log(`üö´ –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${player.username}`);
                return;
              }
              
              allPlayers.push({
                username: player.username,
                userId: player.userId,
                points: player.points,
                position: player.position,
                roundId: 355 + responseIndex + roundIndex, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—É–Ω–¥—ã
                cards: player.play ? player.play.map(card => card.cardId) : []
              });
            });
          }
        });
      }
    });
    
    console.log(`üìà –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ ${allPlayers.length} –∑–∞–ø–∏—Å–µ–π –∏–≥—Ä–æ–∫–æ–≤`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ username –∏ —Å—á–∏—Ç–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è
    const playerStats = {};
    
    allPlayers.forEach(player => {
      if (!playerStats[player.username]) {
        playerStats[player.username] = {
          username: player.username,
          userId: player.userId,
          appearances: 0,
          rounds: [],
          totalPoints: 0,
          bestPosition: Infinity,
          cards: []
        };
      }
      
      playerStats[player.username].appearances++;
      playerStats[player.username].rounds.push(player.roundId);
      playerStats[player.username].totalPoints += player.points;
      playerStats[player.username].bestPosition = Math.min(playerStats[player.username].bestPosition, player.position);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
      if (player.cards) {
        player.cards.forEach(card => {
          if (!playerStats[player.username].cards.includes(card)) {
            playerStats[player.username].cards.push(card);
          }
        });
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ Hot –∏–≥—Ä–æ–∫–æ–≤ (–ø–æ—è–≤–ª—è—é—Ç—Å—è –±–æ–ª—å—à–µ 1 —Ä–∞–∑–∞)
    const hotPlayers = Object.values(playerStats)
      .filter(player => player.appearances > 1)
      .map(player => ({
        username: player.username,
        isHot: true,
        appearances: player.appearances,
        rounds: player.rounds.sort((a, b) => b - a), // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        totalPoints: Math.round(player.totalPoints),
        bestPosition: player.bestPosition,
        cards: player.cards
      }))
      .sort((a, b) => b.appearances - a.appearances); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—è–≤–ª–µ–Ω–∏–π
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const regularPlayers = Object.values(playerStats)
      .filter(player => player.appearances === 1)
      .map(player => ({
        username: player.username,
        isHot: false,
        appearances: 1,
        rounds: player.rounds,
        totalPoints: Math.round(player.totalPoints),
        bestPosition: player.bestPosition,
        cards: player.cards
      }))
      .sort((a, b) => a.bestPosition - b.bestPosition); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª—É—á—à–µ–π –ø–æ–∑–∏—Ü–∏–∏
    
    const dataToSave = {
      hotPlayers: hotPlayers,
      regularPlayers: regularPlayers,
      analysis: {
        totalUniquePlayers: Object.keys(playerStats).length,
        hotPlayersCount: hotPlayers.length,
        regularPlayersCount: regularPlayers.length,
        totalRecords: allPlayers.length
      },
      lastUpdated: new Date().toISOString(),
      roundIds: Array.from(new Set(allPlayers.map(p => p.roundId))).sort((a, b) => b - a)
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    await fs.writeFile('data/topPlayers.json', JSON.stringify(dataToSave, null, 2));
    
    console.log('\n‚úÖ –§–∞–π–ª data/topPlayers.json —Å–æ–∑–¥–∞–Ω!');
    console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${Object.keys(playerStats).length}`);
    console.log(`üî• Hot –∏–≥—Ä–æ–∫–æ–≤: ${hotPlayers.length}`);
    console.log(`üë• –û–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${regularPlayers.length}`);
    console.log(`üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${allPlayers.length}`);
    console.log(`üéÆ –†–∞—É–Ω–¥—ã: ${dataToSave.roundIds.join(', ')}`);
    
    if (hotPlayers.length > 0) {
      console.log('\nüî• –¢–û–ü Hot –∏–≥—Ä–æ–∫–æ–≤:');
      hotPlayers.slice(0, 10).forEach((player, index) => {
        console.log(`  ${index + 1}. ${player.username} (${player.appearances} –ø–æ—è–≤–ª–µ–Ω–∏–π, –ª—É—á—à–∞—è –ø–æ–∑–∏—Ü–∏—è: ${player.bestPosition})`);
        console.log(`     –†–∞—É–Ω–¥—ã: ${player.rounds.join(', ')}`);
        console.log(`     –ö–∞—Ä—Ç—ã: ${player.cards.join(', ')}`);
      });
    }
    
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm start');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.log('\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª api-data.json —Å –æ—Ç–≤–µ—Ç–∞–º–∏ API –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤');
    console.log('   –§–æ—Ä–º–∞—Ç: –º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤ API, –Ω–∞–ø—Ä–∏–º–µ—Ä:');
    console.log('   [');
    console.log('     [{"result":{"data":{"leaderboard":[...]}}}],');
    console.log('     [{"result":{"data":{"leaderboard":[...]}}}]');
    console.log('   ]');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importApiData().catch(console.error);
