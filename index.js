const { fetchMultipleLeaderboards } = require('./api/fetchLeaderboard');
const { fetchLivePlays, getCurrentRoundId } = require('./api/fetchLivePlays');
const { parseLeaderboard, generateRoundIds } = require('./utils/parseLeaderboard');
const { 
  matchTopPlayer, 
  analyzeCardSimilarity, 
  saveToJson, 
  loadFromJson,
  createDeckId,
  formatTimestamp 
} = require('./utils/matchPlayers');
const RoundManager = require('./utils/roundManager');
const DeckTracker = require('./utils/deckTracker');

class BullrunTracker {
  constructor() {
    this.roundManager = new RoundManager();
    this.deckTracker = new DeckTracker();
    this.hotPlayers = [];
    this.monitoring = false;
    this.monitoringInterval = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø-–∏–≥—Ä–æ–∫–∞—Ö
   */
  async initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bullrun Tracker...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—É–Ω–¥–æ–≤
    await this.roundManager.initialize();
    this.currentRoundId = this.roundManager.getCurrentRound();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –∫–æ–ª–æ–¥
    await this.deckTracker.initialize();
    
    console.log(`üìÖ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: ${this.currentRoundId}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const savedData = await loadFromJson('topPlayers.json');
    if (savedData && savedData.hotPlayers && savedData.hotPlayers.length > 0) {
      console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-–∏–≥—Ä–æ–∫–∞—Ö');
      console.log(`üî• –ù–∞–π–¥–µ–Ω–æ ${savedData.hotPlayers.length} Hot –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
      this.hotPlayers = savedData.hotPlayers;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
      const lastUpdated = new Date(savedData.lastUpdated);
      const now = new Date();
      const hoursSinceUpdate = (now - lastUpdated) / (1000 * 60 * 60);
      
      if (hoursSinceUpdate < 24) {
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–æ–±–Ω–æ–≤–ª–µ–Ω—ã ${Math.round(hoursSinceUpdate)} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)`);
        return;
      } else {
        console.log(`‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ (${Math.round(hoursSinceUpdate)} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥), –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...`);
      }
    }
    
    console.log('‚ö†Ô∏è  API –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    console.log('üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Hot –∏–≥—Ä–æ–∫–æ–≤ –Ω—É–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (savedData && savedData.hotPlayers && savedData.hotPlayers.length > 0) {
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ Hot –∏–≥—Ä–æ–∫–∞—Ö');
      this.hotPlayers = savedData.hotPlayers;
      console.log(`üî• –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.hotPlayers.length} Hot –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
      this.printHotPlayers();
      return;
    } else {
      console.log('‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ Hot –∏–≥—Ä–æ–∫–∞—Ö');
      console.log('üí° –°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤');
      this.hotPlayers = []; // –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ—Ö
      return;
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Hot –∏–≥—Ä–æ–∫–∞—Ö
   */
  printHotPlayers() {
    console.log('\nüî• HOT –ò–ì–†–û–ö–ò:');
    console.log('='.repeat(50));
    
    this.hotPlayers.slice(0, 10).forEach((player, index) => {
      console.log(`${index + 1}. ${player.username}`);
      console.log(`   –ü–æ—è–≤–ª–µ–Ω–∏–π: ${player.appearances}`);
      console.log(`   –õ—É—á—à–∞—è –ø–æ–∑–∏—Ü–∏—è: ${player.bestPosition || 'N/A'}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥: ${player.lastSeen}`);
      console.log(`   –ö–∞—Ä—Ç—ã: ${player.cards.slice(0, 5).join(', ')}${player.cards.length > 5 ? '...' : ''}`);
      console.log('');
    });
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   */
  startMonitoring() {
    if (this.monitoring) {
      console.log('‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }
    
    console.log('üëÅÔ∏è  –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...');
    this.monitoring = true;
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É
    this.checkForNewPlays();
    
    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    this.monitoringInterval = setInterval(() => {
      this.checkForNewPlays();
    }, 5000);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  stopMonitoring() {
    if (!this.monitoring) {
      console.log('‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }
    
    console.log('‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    this.monitoring = false;
    
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∏–≥—Ä—ã —Ç–æ–ø-–∏–≥—Ä–æ–∫–æ–≤
   */
  async checkForNewPlays() {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º currentRoundId –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—É–Ω–¥–æ–≤
      this.currentRoundId = this.roundManager.getCurrentRound();
      
      const latestPlays = await fetchLivePlays(this.currentRoundId);
      
      if (latestPlays.length === 0) {
        return;
      }
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${latestPlays.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä...`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –∫–æ–ª–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const { newDecks, updatedDecks } = await this.deckTracker.processNewDecks(latestPlays, this.hotPlayers);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–¥—ã
      for (const deckData of newDecks) {
        await this.logTopPlayerDeck(deckData);
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã
      for (const deckData of updatedDecks) {
        await this.logTopPlayerDeck(deckData, true);
      }
      
      if (newDecks.length > 0 || updatedDecks.length > 0) {
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${newDecks.length} –Ω–æ–≤—ã—Ö, ${updatedDecks.length} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–¥`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä:', error.message);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –∫–æ–ª–æ–¥—É —Ç–æ–ø-–∏–≥—Ä–æ–∫–∞
   */
  async logTopPlayerDeck(deckData, isUpdate = false) {
    const prefix = isUpdate ? 'üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–õ–û–î–´' : 'üéØ –ù–û–í–ê–Ø –ö–û–õ–û–î–ê –û–¢ –¢–û–ü-–ò–ì–†–û–ö–ê!';
    
    console.log(`\n${prefix}`);
    console.log('='.repeat(40));
    console.log(`üë§ –ò–≥—Ä–æ–∫: ${deckData.username}`);
    console.log(`üî• –°—Ç–∞—Ç—É—Å: ${deckData.status} (${deckData.appearances} –ø–æ—è–≤–ª–µ–Ω–∏–π)`);
    console.log(`üÉè –ö–∞—Ä—Ç—ã: ${deckData.cards.join(', ')}`);
    console.log(`‚ö° –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: ${deckData.modifiers.join(', ') || '–ù–µ—Ç'}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${deckData.createdAt}`);
    console.log(`üéÆ –†–∞—É–Ω–¥: ${deckData.roundId}`);
    
    if (isUpdate) {
      console.log(`üîÑ –¢–∏–ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–¥—ã`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const logFilename = `round${deckData.roundId}.json`;
    await this.saveDeckLog(logFilename, deckData);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –∫–æ–ª–æ–¥—ã –≤ —Ñ–∞–π–ª
   */
  async saveDeckLog(filename, deckData) {
    try {
      const filePath = `./data/logs/${filename}`;
      let existingData = [];
      
      try {
        const fs = require('fs').promises;
        const data = await fs.readFile(filePath, 'utf8');
        existingData = JSON.parse(data);
      } catch (error) {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      }
      
      existingData.push(deckData);
      
      const fs = require('fs').promises;
      await fs.writeFile(filePath, JSON.stringify(existingData, null, 2), 'utf8');
      
      console.log(`üíæ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${filename}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞:', error.message);
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  showStats() {
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('='.repeat(30));
    console.log(`üî• Hot –∏–≥—Ä–æ–∫–æ–≤: ${this.hotPlayers.length}`);
    console.log(`üëÅÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${this.monitoring ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`üéÆ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: ${this.currentRoundId}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—É–Ω–¥–æ–≤
    this.roundManager.showStatus();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–∫–µ—Ä–∞ –∫–æ–ª–æ–¥
    this.deckTracker.showStats();
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const tracker = new BullrunTracker();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    tracker.stopMonitoring();
    tracker.roundManager.stopRoundUpdateCheck();
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    tracker.stopMonitoring();
    tracker.roundManager.stopRoundUpdateCheck();
    process.exit(0);
  });
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await tracker.initialize();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    tracker.showStats();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    console.log('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
    tracker.startMonitoring();
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = BullrunTracker;
