const RoundManager = require('./utils/roundManager');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞–º–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞—É–Ω–¥—ã –∏ —Ç.–¥.
 */

async function showHelp() {
  console.log('üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞–º–∏ Bullrun Tracker');
  console.log('='.repeat(50));
  console.log('');
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log('  node manage-rounds.js status     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å');
  console.log('  node manage-rounds.js update     - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—É–Ω–¥');
  console.log('  node manage-rounds.js next       - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
  console.log('  node manage-rounds.js help       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
  console.log('');
}

async function showStatus() {
  console.log('üìä –°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—É–Ω–¥–æ–≤...\n');
  
  const roundManager = new RoundManager();
  await roundManager.initialize();
  roundManager.showStatus();
}

async function forceUpdate() {
  console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞...\n');
  
  const roundManager = new RoundManager();
  await roundManager.initialize();
  
  const oldRound = roundManager.getCurrentRound();
  await roundManager.forceUpdateRound();
  const newRound = roundManager.getCurrentRound();
  
  console.log(`‚úÖ –†–∞—É–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω: ${oldRound} ‚Üí ${newRound}`);
}

async function showNextUpdate() {
  console.log('‚è∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏...\n');
  
  const roundManager = new RoundManager();
  await roundManager.initialize();
  
  const nextUpdateInfo = roundManager.getNextUpdateInfo();
  
  console.log('üìÖ –°–õ–ï–î–£–Æ–©–ï–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï:');
  console.log('='.repeat(30));
  console.log(`üéØ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: ${nextUpdateInfo.currentRound}`);
  console.log(`üéØ –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥: ${nextUpdateInfo.nextRound}`);
  console.log(`‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${nextUpdateInfo.nextUpdate}`);
  console.log(`‚è≥ –í—Ä–µ–º—è –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${nextUpdateInfo.timeUntilUpdate}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'status':
      await showStatus();
      break;
      
    case 'update':
      await forceUpdate();
      break;
      
    case 'next':
      await showNextUpdate();
      break;
      
    case 'help':
    case '--help':
    case '-h':
      await showHelp();
      break;
      
    default:
      console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "help" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.\n');
      await showHelp();
      process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  showStatus,
  forceUpdate,
  showNextUpdate
};
