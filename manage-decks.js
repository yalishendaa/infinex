const DeckTracker = require('./utils/deckTracker');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–º –∫–æ–ª–æ–¥
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –æ—á–∏—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Ç.–¥.
 */

async function showHelp() {
  console.log('üÉè –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–æ–º –∫–æ–ª–æ–¥ Bullrun Tracker');
  console.log('='.repeat(50));
  console.log('');
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  console.log('  node manage-decks.js stats      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
  console.log('  node manage-decks.js clean      - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ');
  console.log('  node manage-decks.js history    - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä–æ–∫–∞');
  console.log('  node manage-decks.js help       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
  console.log('');
}

async function showStats() {
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ –∫–æ–ª–æ–¥...\n');
  
  const deckTracker = new DeckTracker();
  await deckTracker.initialize();
  deckTracker.showStats();
}

async function cleanOldData() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');
  
  const deckTracker = new DeckTracker();
  await deckTracker.initialize();
  
  const daysToKeep = process.argv[3] ? parseInt(process.argv[3]) : 30;
  console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ ${daysToKeep} –¥–Ω–µ–π...`);
  
  await deckTracker.cleanOldData(daysToKeep);
  
  console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

async function showHistory() {
  const username = process.argv[3];
  
  if (!username) {
    console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: node manage-decks.js history <username>');
    return;
  }
  
  console.log(`üìö –ò—Å—Ç–æ—Ä–∏—è –∫–æ–ª–æ–¥ –¥–ª—è ${username}...\n`);
  
  const deckTracker = new DeckTracker();
  await deckTracker.initialize();
  
  if (!deckTracker.deckHistory.has(username)) {
    console.log(`‚ö†Ô∏è  –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return;
  }
  
  const history = deckTracker.deckHistory.get(username);
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${history.length} –∫–æ–ª–æ–¥:`);
  console.log('='.repeat(60));
  
  history.slice(0, 10).forEach((deck, index) => {
    console.log(`${index + 1}. –†–∞—É–Ω–¥ ${deck.roundId} - ${deck.createdAt}`);
    console.log(`   –ö–∞—Ä—Ç—ã: ${deck.cards.join(', ')}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${deck.status} (${deck.appearances} –ø–æ—è–≤–ª–µ–Ω–∏–π)`);
    if (deck.isUpdate) {
      console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${deck.updatedAt}`);
    }
    console.log('');
  });
  
  if (history.length > 10) {
    console.log(`... –∏ –µ—â–µ ${history.length - 10} –∫–æ–ª–æ–¥`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'stats':
      await showStats();
      break;
      
    case 'clean':
      await cleanOldData();
      break;
      
    case 'history':
      await showHistory();
      break;
      
    case 'help':
    case '--help':
    case '-h':
      await showHelp();
      break;
      
    default:
      console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "help" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.\n');
      await showHelp();
      process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  showStats,
  cleanOldData,
  showHistory
};
