const fs = require('fs').promises;
const path = require('path');

class DeckTracker {
  constructor() {
    this.processedDecks = new Map(); // username -> Set of deckIds
    this.deckHistory = new Map(); // username -> Array of deck objects
    this.dataFile = path.join(__dirname, '..', 'data', 'processedDecks.json');
    this.historyFile = path.join(__dirname, '..', 'data', 'deckHistory.json');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫–µ—Ä, –∑–∞–≥—Ä—É–∂–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async initialize() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –∫–æ–ª–æ–¥...');
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã
      await this.loadProcessedDecks();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–ª–æ–¥
      await this.loadDeckHistory();
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.processedDecks.size} –∏–≥—Ä–æ–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–¥–∞–º–∏`);
      console.log(`üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.deckHistory.size} –∏–≥—Ä–æ–∫–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∫–æ–ª–æ–¥`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞ –∫–æ–ª–æ–¥:', error.message);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞
   */
  async loadProcessedDecks() {
    try {
      const data = await fs.readFile(this.dataFile, 'utf8');
      const saved = JSON.parse(data);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Map –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      this.processedDecks = new Map();
      for (const [username, deckIds] of Object.entries(saved.processedDecks || {})) {
        this.processedDecks.set(username, new Set(deckIds));
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      this.processedDecks = new Map();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–ª–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞
   */
  async loadDeckHistory() {
    try {
      const data = await fs.readFile(this.historyFile, 'utf8');
      const saved = JSON.parse(data);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Map –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      this.deckHistory = new Map();
      for (const [username, decks] of Object.entries(saved.deckHistory || {})) {
        this.deckHistory.set(username, decks);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–ª–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      this.deckHistory = new Map();
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã –≤ —Ñ–∞–π–ª
   */
  async saveProcessedDecks() {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è JSON
      const processedDecksObj = {};
      for (const [username, deckIds] of this.processedDecks) {
        processedDecksObj[username] = Array.from(deckIds);
      }
      
      const data = {
        processedDecks: processedDecksObj,
        lastUpdated: new Date().toISOString(),
        totalPlayers: this.processedDecks.size,
        totalDecks: Array.from(this.processedDecks.values()).reduce((sum, set) => sum + set.size, 0)
      };
      
      await fs.writeFile(this.dataFile, JSON.stringify(data, null, 2), 'utf8');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–¥:', error.message);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–ª–æ–¥ –≤ —Ñ–∞–π–ª
   */
  async saveDeckHistory() {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è JSON
      const deckHistoryObj = {};
      for (const [username, decks] of this.deckHistory) {
        deckHistoryObj[username] = decks;
      }
      
      const data = {
        deckHistory: deckHistoryObj,
        lastUpdated: new Date().toISOString(),
        totalPlayers: this.deckHistory.size,
        totalDecks: Array.from(this.deckHistory.values()).reduce((sum, decks) => sum + decks.length, 0)
      };
      
      await fs.writeFile(this.historyFile, JSON.stringify(data, null, 2), 'utf8');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–ª–æ–¥:', error.message);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–æ–ª–æ–¥—ã
   */
  createDeckId(username, createdAt, roundId) {
    return `${username}_${roundId}_${createdAt}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ –∫–æ–ª–æ–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
   */
  isDeckProcessed(username, createdAt, roundId) {
    const deckId = this.createDeckId(username, createdAt, roundId);
    
    if (!this.processedDecks.has(username)) {
      return false;
    }
    
    return this.processedDecks.get(username).has(deckId);
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç –∫–æ–ª–æ–¥—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
   */
  markDeckAsProcessed(username, createdAt, roundId) {
    const deckId = this.createDeckId(username, createdAt, roundId);
    
    if (!this.processedDecks.has(username)) {
      this.processedDecks.set(username, new Set());
    }
    
    this.processedDecks.get(username).add(deckId);
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–¥—É –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä–æ–∫–∞
   */
  addDeckToHistory(username, deckData) {
    if (!this.deckHistory.has(username)) {
      this.deckHistory.set(username, []);
    }
    
    const history = this.deckHistory.get(username);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–æ–¥–∞ —Å —Ç–∞–∫–∏–º –∂–µ roundId –∏ createdAt
    const existingIndex = history.findIndex(deck => 
      deck.roundId === deckData.roundId && 
      deck.createdAt === deckData.createdAt
    );
    
    if (existingIndex !== -1) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–¥—É
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã –¥–ª—è ${username} –≤ —Ä–∞—É–Ω–¥–µ ${deckData.roundId}`);
      history[existingIndex] = {
        ...history[existingIndex],
        ...deckData,
        updatedAt: new Date().toISOString(),
        isUpdate: true
      };
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É
      history.push({
        ...deckData,
        addedAt: new Date().toISOString(),
        isUpdate: false
      });
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    history.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 50 –∫–æ–ª–æ–¥–∞–º–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞
    if (history.length > 50) {
      history.splice(50);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–ª–æ–¥—ã, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  async processNewDecks(latestPlays, hotPlayers) {
    const newDecks = [];
    const updatedDecks = [];
    
    for (const play of latestPlays) {
      const username = play.username;
      const createdAt = play.createdAt;
      const roundId = play.roundId;
      
      // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "Seal"
      if (username.toLowerCase() === 'seal') {
        console.log(`üö´ –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ç–æ–ø–æ–≤—ã–º (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ Hot –∏–≥—Ä–æ–∫–æ–≤)
      let topPlayer = null;
      if (hotPlayers && hotPlayers.length > 0) {
        topPlayer = hotPlayers.find(player => player.username === username);
        if (!topPlayer) {
          continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ Hot –∏–≥—Ä–æ–∫–æ–≤, –Ω–æ –∏–≥—Ä–æ–∫ –Ω–µ –≤ –Ω–µ–º
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ Hot –∏–≥—Ä–æ–∫–æ–≤, —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö —Ç–æ–ø–æ–≤—ã–º–∏
        topPlayer = { username: username, isHot: false, appearances: 1 };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∫–æ–ª–æ–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
      if (this.isDeckProcessed(username, createdAt, roundId)) {
        continue;
      }
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã
      const deckData = {
        username: username,
        status: topPlayer.isHot ? 'Hot' : 'Top',
        isHot: topPlayer.isHot,
        appearances: topPlayer.appearances,
        cards: play.play ? play.play.map(card => card.cardId) : [],
        modifiers: play.modifiers || [],
        createdAt: createdAt,
        roundId: roundId,
        timestamp: new Date().toISOString()
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–¥—ã
      const isUpdate = this.isDeckUpdate(username, roundId, createdAt);
      const hasExistingDeck = this.hasDeckInRound(username, roundId);
      
      if (isUpdate) {
        updatedDecks.push(deckData);
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã –¥–ª—è ${username} –≤ —Ä–∞—É–Ω–¥–µ ${roundId}`);
      } else if (hasExistingDeck) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–¥–∞ –≤ —Ä–∞—É–Ω–¥–µ, –Ω–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ª–æ–¥—É –æ—Ç ${username} –≤ —Ä–∞—É–Ω–¥–µ ${roundId}`);
        continue;
      } else {
        newDecks.push(deckData);
        console.log(`üÜï –ù–æ–≤–∞—è –∫–æ–ª–æ–¥–∞ –æ—Ç ${username} –≤ —Ä–∞—É–Ω–¥–µ ${roundId}`);
      }
      
      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
      this.markDeckAsProcessed(username, createdAt, roundId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.addDeckToHistory(username, deckData);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await this.saveProcessedDecks();
    await this.saveDeckHistory();
    
    return { newDecks, updatedDecks };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
   */
  isDeckUpdate(username, roundId, createdAt) {
    if (!this.deckHistory.has(username)) {
      return false;
    }
    
    const history = this.deckHistory.get(username);
    
    // –ò—â–µ–º –∫–æ–ª–æ–¥—É —Å —Ç–µ–º –∂–µ roundId
    const existingDeck = history.find(deck => deck.roundId === roundId);
    
    if (existingDeck) {
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –∫–æ–ª–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∂–µ
      const existingTime = new Date(existingDeck.createdAt);
      const newTime = new Date(createdAt);
      
      return existingTime.getTime() !== newTime.getTime() && newTime > existingTime;
    }
    
    return false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –∫–æ–ª–æ–¥–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ
   */
  hasDeckInRound(username, roundId) {
    if (!this.deckHistory.has(username)) {
      return false;
    }
    
    const history = this.deckHistory.get(username);
    return history.some(deck => deck.roundId === roundId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–∫–µ—Ä–∞
   */
  getStats() {
    const totalProcessedDecks = Array.from(this.processedDecks.values())
      .reduce((sum, set) => sum + set.size, 0);
    
    const totalHistoryDecks = Array.from(this.deckHistory.values())
      .reduce((sum, decks) => sum + decks.length, 0);
    
    return {
      totalPlayers: this.processedDecks.size,
      totalProcessedDecks: totalProcessedDecks,
      totalHistoryDecks: totalHistoryDecks,
      playersWithHistory: this.deckHistory.size
    };
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–∫–µ—Ä–∞
   */
  showStats() {
    const stats = this.getStats();
    
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ï–ö–ï–†–ê –ö–û–õ–û–î:');
    console.log('='.repeat(40));
    console.log(`üë• –ò–≥—Ä–æ–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–¥–∞–º–∏: ${stats.totalPlayers}`);
    console.log(`üÉè –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–ª–æ–¥: ${stats.totalProcessedDecks}`);
    console.log(`üìà –ò–≥—Ä–æ–∫–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π: ${stats.playersWithHistory}`);
    console.log(`üìö –í—Å–µ–≥–æ –∫–æ–ª–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${stats.totalHistoryDecks}`);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
   */
  async cleanOldData(daysToKeep = 30) {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
    
    let cleanedDecks = 0;
    let cleanedHistory = 0;
    
    // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã
    for (const [username, deckIds] of this.processedDecks) {
      const originalSize = deckIds.size;
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ deckIds (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—ã –∏–∑ deckIds
      
      if (deckIds.size !== originalSize) {
        cleanedDecks += (originalSize - deckIds.size);
      }
    }
    
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–ª–æ–¥
    for (const [username, decks] of this.deckHistory) {
      const originalLength = decks.length;
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–ª–æ–¥—ã –ø–æ –¥–∞—Ç–µ
      const filteredDecks = decks.filter(deck => {
        const deckDate = new Date(deck.createdAt);
        return deckDate >= cutoffDate;
      });
      
      if (filteredDecks.length !== originalLength) {
        this.deckHistory.set(username, filteredDecks);
        cleanedHistory += (originalLength - filteredDecks.length);
      }
    }
    
    if (cleanedDecks > 0 || cleanedHistory > 0) {
      await this.saveProcessedDecks();
      await this.saveDeckHistory();
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedDecks} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–¥ –∏ ${cleanedHistory} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`);
    }
  }
}

module.exports = DeckTracker;

