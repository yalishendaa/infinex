/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ–ø-–∏–≥—Ä–æ–∫–æ–≤
 * @param {Array} allPlayers - –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö —Ä–∞—É–Ω–¥–æ–≤
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–≥—Ä–æ–∫–æ–≤
 */
function parseLeaderboard(allPlayers) {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤...');
  
  // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–æ–∫–∞–º
  const playerStats = new Map();
  const uniquePlayers = new Set();
  
  allPlayers.forEach(player => {
    const username = player.username;
    uniquePlayers.add(username);
    
    if (!playerStats.has(username)) {
      playerStats.set(username, {
        username: username,
        appearances: 0,
        totalPoints: 0,
        bestPosition: Infinity,
        rounds: [],
        cards: new Set()
      });
    }
    
    const stats = playerStats.get(username);
    stats.appearances++;
    stats.totalPoints += player.points || 0;
    stats.bestPosition = Math.min(stats.bestPosition, player.position || Infinity);
    stats.rounds.push(player.roundId || 'unknown');
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
    if (player.play && Array.isArray(player.play)) {
      player.play.forEach(card => {
        if (card.cardId) {
          stats.cards.add(card.cardId);
        }
      });
    }
  });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º "Hot" –∏–≥—Ä–æ–∫–æ–≤ (–ø–æ—è–≤–ª—è–ª–∏—Å—å 2+ —Ä–∞–∑–∞)
  const hotPlayers = [];
  const regularPlayers = [];
  
  playerStats.forEach((stats, username) => {
    const playerData = {
      username: stats.username,
      isHot: stats.appearances >= 2,
      appearances: stats.appearances,
      totalPoints: stats.totalPoints,
      bestPosition: stats.bestPosition === Infinity ? null : stats.bestPosition,
      rounds: stats.rounds,
      cards: Array.from(stats.cards),
      lastSeen: Math.max(...stats.rounds.filter(r => typeof r === 'number'))
    };
    
    if (playerData.isHot) {
      hotPlayers.push(playerData);
    } else {
      regularPlayers.push(playerData);
    }
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º Hot –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—è–≤–ª–µ–Ω–∏–π
  hotPlayers.sort((a, b) => b.appearances - a.appearances);
  
  console.log(`üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:`);
  console.log(`   ‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${uniquePlayers.size}`);
  console.log(`   ‚Ä¢ Hot –∏–≥—Ä–æ–∫–æ–≤ (2+ –ø–æ—è–≤–ª–µ–Ω–∏–π): ${hotPlayers.length}`);
  console.log(`   ‚Ä¢ –û–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${regularPlayers.length}`);
  
  return {
    hotPlayers,
    regularPlayers,
    totalUniquePlayers: uniquePlayers.size,
    allPlayers: Array.from(playerStats.values())
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
 * @param {number} currentRoundId - ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
 * @param {number} roundsCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
 * @returns {Array<number>} –ú–∞—Å—Å–∏–≤ ID —Ä–∞—É–Ω–¥–æ–≤
 */
function generateRoundIds(currentRoundId, roundsCount = 10) {
  const roundIds = [];
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—É–Ω–¥—ã –æ—Ç currentRoundId –¥–æ currentRoundId - 9
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ currentRoundId = 357, —Ç–æ –ø–æ–ª—É—á–∞–µ–º [357, 356, 355, 354, 353, 352, 351, 350, 349, 348]
  for (let i = 0; i < roundsCount; i++) {
    roundIds.push(currentRoundId - i);
  }
  return roundIds;
}

module.exports = {
  parseLeaderboard,
  generateRoundIds
};
