const { saveCurrentRoundId, getSavedCurrentRoundId } = require('../api/fetchLivePlays');

class RoundManager {
  constructor() {
    this.currentRoundId = null;
    this.lastUpdateDate = null;
    this.updateInterval = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—É–Ω–¥–æ–≤
   */
  async initialize() {
    console.log('üïê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—É–Ω–¥–æ–≤...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞—É–Ω–¥
    this.currentRoundId = await getSavedCurrentRoundId();
    this.lastUpdateDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    
    console.log(`üìÖ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: ${this.currentRoundId}`);
    console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${this.lastUpdateDate}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
    this.startRoundUpdateCheck();
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –≤ 00:00 UTC
   */
  startRoundUpdateCheck() {
    console.log('‚è∞ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ 00:00 UTC
    this.updateInterval = setInterval(() => {
      this.checkForRoundUpdate();
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    this.checkForRoundUpdate();
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
   */
  stopRoundUpdateCheck() {
    if (this.updateInterval) {
      clearInterval(this.updateInterval);
      this.updateInterval = null;
      console.log('‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—É–Ω–¥ (–≤ 00:00 UTC)
   */
  checkForRoundUpdate() {
    const now = new Date();
    const utcNow = new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
    const currentDate = utcNow.toISOString().split('T')[0]; // YYYY-MM-DD
    const currentHour = utcNow.getUTCHours();
    const currentMinute = utcNow.getUTCMinutes();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ 00:00 UTC
    if (currentHour === 0 && currentMinute === 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
      if (this.lastUpdateDate !== currentDate) {
        this.updateRound();
        this.lastUpdateDate = currentDate;
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—É–Ω–¥ (+1) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª
   */
  async updateRound() {
    const oldRoundId = this.currentRoundId;
    this.currentRoundId += 1;
    
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞: ${oldRoundId} ‚Üí ${this.currentRoundId}`);
    console.log(`‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${new Date().toISOString()}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    await saveCurrentRoundId(this.currentRoundId);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    this.logRoundUpdate(oldRoundId, this.currentRoundId);
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
   */
  async logRoundUpdate(oldRoundId, newRoundId) {
    try {
      const fs = require('fs').promises;
      const path = require('path');
      const logPath = path.join(__dirname, '..', 'data', 'logs', 'roundUpdates.json');
      
      let updates = [];
      
      // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      try {
        const data = await fs.readFile(logPath, 'utf8');
        updates = JSON.parse(data);
      } catch (error) {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      updates.push({
        oldRoundId: oldRoundId,
        newRoundId: newRoundId,
        updatedAt: new Date().toISOString(),
        timezone: 'UTC'
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      await fs.writeFile(logPath, JSON.stringify(updates, null, 2), 'utf8');
      
      console.log(`üìù –õ–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞:', error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
   */
  getCurrentRound() {
    return this.currentRoundId;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async forceUpdateRound() {
    console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞...');
    await this.updateRound();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
   */
  getNextUpdateInfo() {
    const now = new Date();
    const utcNow = new Date(now.getTime() + (now.getTimezoneOffset() * 60000));
    
    // –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ 00:00 UTC –∑–∞–≤—Ç—Ä–∞
    const nextUpdate = new Date(utcNow);
    nextUpdate.setUTCDate(nextUpdate.getUTCDate() + 1);
    nextUpdate.setUTCHours(0, 0, 0, 0);
    
    const timeUntilUpdate = nextUpdate.getTime() - utcNow.getTime();
    const hours = Math.floor(timeUntilUpdate / (1000 * 60 * 60));
    const minutes = Math.floor((timeUntilUpdate % (1000 * 60 * 60)) / (1000 * 60));
    
    return {
      nextUpdate: nextUpdate.toISOString(),
      timeUntilUpdate: `${hours}—á ${minutes}–º`,
      currentRound: this.currentRoundId,
      nextRound: this.currentRoundId + 1
    };
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—É–Ω–¥–æ–≤
   */
  showStatus() {
    const nextUpdateInfo = this.getNextUpdateInfo();
    
    console.log('\nüïê –°–¢–ê–¢–£–° –ú–ï–ù–ï–î–ñ–ï–†–ê –†–ê–£–ù–î–û–í:');
    console.log('='.repeat(40));
    console.log(`üìÖ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: ${this.currentRoundId}`);
    console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${this.lastUpdateDate}`);
    console.log(`‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${nextUpdateInfo.nextUpdate}`);
    console.log(`‚è≥ –í—Ä–µ–º—è –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${nextUpdateInfo.timeUntilUpdate}`);
    console.log(`üéØ –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥: ${nextUpdateInfo.nextRound}`);
    console.log(`üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${this.updateInterval ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
  }
}

module.exports = RoundManager;
