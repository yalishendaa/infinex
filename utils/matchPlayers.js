const fs = require('fs').promises;
const path = require('path');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ç–æ–ø–æ–≤—ã–º (–∏–∑ —Å–ø–∏—Å–∫–∞ Hot –∏–≥—Ä–æ–∫–æ–≤)
 * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Array} hotPlayers - –ú–∞—Å—Å–∏–≤ Hot –∏–≥—Ä–æ–∫–æ–≤
 * @returns {Object|null} –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ null
 */
function matchTopPlayer(username, hotPlayers) {
  return hotPlayers.find(player => player.username === username) || null;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –∫–∞—Ä—Ç –º–µ–∂–¥—É Hot –∏–≥—Ä–æ–∫–∞–º–∏
 * @param {Array} hotPlayers - –ú–∞—Å—Å–∏–≤ Hot –∏–≥—Ä–æ–∫–æ–≤
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ö–æ–∂–µ—Å—Ç–∏
 */
function analyzeCardSimilarity(hotPlayers) {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –∫–∞—Ä—Ç –º–µ–∂–¥—É Hot –∏–≥—Ä–æ–∫–∞–º–∏...');
  
  const similarities = [];
  
  for (let i = 0; i < hotPlayers.length; i++) {
    for (let j = i + 1; j < hotPlayers.length; j++) {
      const player1 = hotPlayers[i];
      const player2 = hotPlayers[j];
      
      const cards1 = new Set(player1.cards);
      const cards2 = new Set(player2.cards);
      
      // –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –∫–∞—Ä—Ç—ã
      const commonCards = [...cards1].filter(card => cards2.has(card));
      const similarity = commonCards.length / Math.max(cards1.size, cards2.size);
      
      if (commonCards.length > 0) {
        similarities.push({
          player1: player1.username,
          player2: player2.username,
          commonCards: commonCards,
          similarity: Math.round(similarity * 100) / 100,
          commonCount: commonCards.length
        });
      }
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
  similarities.sort((a, b) => b.similarity - a.similarity);
  
  console.log(`üìà –ù–∞–π–¥–µ–Ω–æ ${similarities.length} –ø–∞—Ä –∏–≥—Ä–æ–∫–æ–≤ —Å –æ–±—â–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏`);
  
  return similarities;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
 * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
async function saveToJson(filename, data) {
  try {
    const filePath = path.join(__dirname, '..', 'data', filename);
    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf8');
    console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filename}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ${filename}:`, error.message);
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
 * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞
 * @returns {Object|null} –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null
 */
async function loadFromJson(filename) {
  try {
    const filePath = path.join(__dirname, '..', 'data', filename);
    const data = await fs.readFile(filePath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω`);
    return null;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–æ–ª–æ–¥—ã
 * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} createdAt - –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
 * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
 */
function createDeckId(username, createdAt) {
  return `${username}_${createdAt}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –ª–æ–≥–æ–≤
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
function formatTimestamp() {
  return new Date().toISOString();
}

module.exports = {
  matchTopPlayer,
  analyzeCardSimilarity,
  saveToJson,
  loadFromJson,
  createDeckId,
  formatTimestamp
};
