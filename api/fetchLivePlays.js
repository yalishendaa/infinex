const axios = require('axios');

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
 * @param {number} roundId - ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
 */
async function fetchLivePlays(roundId) {
  try {
    const url = 'https://api.app.infinex.xyz/cardrunGetLatestRoundPlays';
    const params = {
      batch: 1,
      input: JSON.stringify({
        "0": { roundId: roundId }
      })
    };

    const response = await axios.get(url, { 
      params,
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Referer': 'https://app.infinex.xyz/',
        'Origin': 'https://app.infinex.xyz',
        'Accept': 'application/json',
        'Accept-Language': 'en-US,en;q=0.9',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });
    
    if (response.data && response.data[0] && response.data[0].result && response.data[0].result.data && response.data[0].result.data.latestPlays) {
      const latestPlays = response.data[0].result.data.latestPlays;
      console.log(`üéÆ –ü–æ–ª—É—á–µ–Ω–æ ${latestPlays.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId}`);
      return latestPlays;
    } else {
      console.log(`‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId}`);
      return [];
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId}:`, error.message);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –∏–∑ API
 * @returns {Promise<number>} ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
 */
async function getCurrentRoundId() {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å currentRoundId –∏–∑ API —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–æ–¥–∞–º–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—É–Ω–¥ 999999 –∫–∞–∫ "—Ç–µ–∫—É—â–∏–π" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const url = 'https://api.app.infinex.xyz/cardrunGetLatestRoundPlays';
    const params = {
      batch: 1,
      input: JSON.stringify({
        "0": { roundId: 999999 } // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
      })
    };

    const response = await axios.get(url, { params });
    
    if (response.data && response.data[0]) {
      // –ò—â–µ–º currentRoundId –≤ –æ—Ç–≤–µ—Ç–µ
      const data = response.data[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
      if (data.currentRoundId) {
        console.log(`üéØ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –∏–∑ API: ${data.currentRoundId}`);
        return data.currentRoundId;
      }
      
      // –ï—Å–ª–∏ currentRoundId –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ latestPlays
      if (data.latestPlays && data.latestPlays.length > 0) {
        const maxRoundId = Math.max(...data.latestPlays.map(play => play.roundId || 0));
        if (maxRoundId > 0) {
          console.log(`üéØ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –∏–∑ latestPlays: ${maxRoundId}`);
          return maxRoundId;
        }
      }
    }
    
    // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    const savedRoundId = await getSavedCurrentRoundId();
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞—É–Ω–¥: ${savedRoundId}`);
    return savedRoundId;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ currentRoundId:', error.message);
    // Fallback –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
    const savedRoundId = await getSavedCurrentRoundId();
    console.log(`üéØ Fallback –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ä–∞—É–Ω–¥—É: ${savedRoundId}`);
    return savedRoundId;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π currentRoundId –∏–∑ —Ñ–∞–π–ª–∞
 * @returns {Promise<number>} –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID —Ä–∞—É–Ω–¥–∞
 */
async function getSavedCurrentRoundId() {
  try {
    const fs = require('fs').promises;
    const path = require('path');
    const configPath = path.join(__dirname, '..', 'data', 'currentRound.json');
    
    const data = await fs.readFile(configPath, 'utf8');
    const config = JSON.parse(data);
    return config.currentRoundId || 359; // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  } catch (error) {
    console.log('‚ö†Ô∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞—É–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    return 359; // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç currentRoundId –≤ —Ñ–∞–π–ª
 * @param {number} roundId - ID —Ä–∞—É–Ω–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
async function saveCurrentRoundId(roundId) {
  try {
    const fs = require('fs').promises;
    const path = require('path');
    const configPath = path.join(__dirname, '..', 'data', 'currentRound.json');
    
    const config = {
      currentRoundId: roundId,
      lastUpdated: new Date().toISOString(),
      timezone: 'UTC'
    };
    
    await fs.writeFile(configPath, JSON.stringify(config, null, 2), 'utf8');
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω currentRoundId: ${roundId}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ currentRoundId:', error.message);
  }
}

module.exports = {
  fetchLivePlays,
  getCurrentRoundId,
  saveCurrentRoundId,
  getSavedCurrentRoundId
};
