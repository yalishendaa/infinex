const axios = require('axios');

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 * @param {number} roundId - ID —Ä–∞—É–Ω–¥–∞
 * @param {number} retries - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ leaderboard
 */
async function fetchLeaderboard(roundId, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const url = 'https://api.app.infinex.xyz/cardrunGetRoundLeaderboard,cardrunGetRoundRealtimeLeaderboard';
      const params = {
        batch: 1,
        input: JSON.stringify({
          "0": { roundId: roundId },
          "1": { roundId: roundId }
        })
      };

      console.log(`üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries})...`);
      
      const response = await axios.get(url, { 
        params,
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Referer': 'https://app.infinex.xyz/',
          'Origin': 'https://app.infinex.xyz',
          'Accept': 'application/json',
          'Accept-Language': 'en-US,en;q=0.9',
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –æ—Ç–≤–µ—Ç–∞ (leaderboard –∏ realtime leaderboard)
      let leaderboard = [];
      
      if (response.data && response.data[0] && response.data[0].leaderboard) {
        leaderboard = response.data[0].leaderboard;
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${leaderboard.length} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ leaderboard –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId}`);
      } else if (response.data && response.data[1] && response.data[1].leaderboard) {
        leaderboard = response.data[1].leaderboard;
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${leaderboard.length} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ realtime leaderboard –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId}`);
      } else {
        console.log(`‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId}`);
        return [];
      }
      
      return leaderboard;
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log(`üîí API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId} (401). –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}`);
        if (attempt < retries) {
          const delayTime = attempt * 15000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (15—Å, 30—Å, 45—Å)
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delayTime/1000} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await delay(delayTime);
        }
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId}:`, error.message);
        return [];
      }
    }
  }
  
  console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId} –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`);
  return [];
}

/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
 * @param {number} ms - –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
 */
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞—É–Ω–¥–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
 * @param {Array<number>} roundIds - –ú–∞—Å—Å–∏–≤ ID —Ä–∞—É–Ω–¥–æ–≤
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö —Ä–∞—É–Ω–¥–æ–≤
 */
async function fetchMultipleLeaderboards(roundIds) {
  console.log(`üöÄ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã –¥–ª—è ${roundIds.length} —Ä–∞—É–Ω–¥–æ–≤...`);
  
  const allPlayers = [];
  const delayBetweenRequests = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  
  for (let i = 0; i < roundIds.length; i++) {
    const roundId = roundIds[i];
    console.log(`üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${roundId} (${i + 1}/${roundIds.length})...`);
    
    try {
      const leaderboard = await fetchLeaderboard(roundId);
      allPlayers.push(...leaderboard);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
      if (i < roundIds.length - 1) {
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delayBetweenRequests/1000} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...`);
        await delay(delayBetweenRequests);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—É–Ω–¥–∞ ${roundId}:`, error.message);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—É–Ω–¥–æ–º
    }
  }
  
  console.log(`üìà –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ ${allPlayers.length} –∑–∞–ø–∏—Å–µ–π –∏–≥—Ä–æ–∫–æ–≤`);
  return allPlayers;
}

module.exports = {
  fetchLeaderboard,
  fetchMultipleLeaderboards
};
